<?xml version="1.0" encoding="utf-8"?>

<Pipelines xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://connectomes.utah.edu D:/Buildscript/Pipeline/Data/Buildscript.xsd"
                     xmlns:n0="http://connectomes.utah.edu/Buildscript/">
  <Arguments>
    <Argument flag="-to" action="store" dest="To" default="" help="E-Mail addresses for reports" nargs="*"/>
    <Argument flag="-cc" action="store" dest="CC" default="" help="E-Mail addresses for reports" nargs="*"/>
  </Arguments>

  <Pipeline Name="TEMPrepare" Description="1st step after import, removes blank tiles and builds an intensity histogram for the mosaic">
    <Arguments>
      <Argument flag="-overlap" dest="Overlap" default="0.1" type="float" help="Percentage overlap between tiles, 0.0 to 1,0" required="False"/>
      <Argument flag="-prune" dest="PruneThreshold" default="1.0" type="float" help="Threshold for prune" required="False"/>
      <Argument flag="-InputFilter" dest="InputFilter" default="Raw8" help="Filter used to build leveled and mosaic images" required="False"/>
    </Arguments>

    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="PyramidNode" XPath="Filter[@Name='#InputFilter']/TilePyramid"/>
      <PythonCall Function="tile.VerifyImages" TilePyramidNode="#PyramidNode"/>
      <PythonCall Function="tile.BuildTilePyramids" Levels="1,4" PyramidNode="#PyramidNode"/>

      <Select VariableName="TransformNode" XPath="Transform[@Name='Stage']"/>
      <PythonCall Function="registration.CompressTransforms"/>
      
      <!-- Assign a number to each tile describing if there are interesting features to the image -->
      <Select VariableName="FilterNode" Root="ChannelNode" XPath="Filter[@Name='#InputFilter']"/>
      <Select VariableName="LevelNode" Root="FilterNode" XPath="TilePyramid/Level[@Downsample='4']"/>
      <PythonCall Function="pruneobj.PruneObj.CalculatePruneScores" OutputFile="PruneScores">
        <Parameters>
          <Entry Name="Overlap" Value="#Overlap"/>
        </Parameters>
      </PythonCall>
        
      <!-- Remove tiles that are featureless from the mosaic -->
      <Select VariableName="PruneNode" Root="FilterNode" XPath="Prune[@Overlap='#Overlap']"/>
      <PythonCall Function="pruneobj.PruneObj.PruneMosaic" OutputTransformName="Prune">
        <Parameters>
          <Entry Name="Threshold" Value="#PruneThreshold"/>
        </Parameters>
      </PythonCall>
    </Iterate> 
        
	<!-- Calculate the intensity histogram for the entire mosaic -->
    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="TransformNode" XPath="Transform[@Name='Prune']"/>
      <Select VariableName="FilterNode" XPath="Filter[@Name='#InputFilter']"/>
      <Select VariableName="LevelNode" Root="FilterNode" XPath="TilePyramid/Level[@Downsample='4']"/>
      <PythonCall Function="tile.HistogramFilter">
        <Parameters>
          <Entry Name="Level" Value="1"/>
          <Entry Name="Overlap" Value="#Overlap"/> 
        </Parameters>
      </PythonCall>
    </Iterate>
 	
 	<!--
 	<Select VariableName="ReportingElement" XPath="Block"/>
 	<PythonCall Function="reporting.GenerateTableReport"
     		    OutputFile="HistogramReport.html"
     		    RowXPath="Section"
     		    RowLabelAttrib="Number"
     		    MaxImageWidth="512"
     		    MaxImageHeight="256"
     		    ColumnXPaths="Channel/Filter[@Name='#InputFilter']/Histogram/Image,Channel/Filter[@Name='#InputFilter']/Prune/Image,Channel/Data[@Name='Log']" />
 	
    <PythonCall Module="nornir_buildmanager.VolumeFinder" Function="EmailIndex" subject="Histograms" to="#To" cc="#CC" ImageWidth="256" ImageHeight="256"/>
    -->
  </Pipeline>
  
  <Pipeline Name="ShadeCorrect" Description="Optional shading correction">
    <Arguments>
    	<Argument flag="-InputFilter" dest="FilterPattern" default="*" help="Filter regex pattern used to select filters for correction" required="False"/>
    	<Argument flag="-OutputFilter" dest="OutputFilter" default="ShadingCorrected" help="Prefix for filters with shading correction applied" required="False"/>
    </Arguments>

    <Iterate VariableName="FilterNode" XPath="Block/Section/Channel/Filter">
      <RequireMatch Attribute="Name" RegEx="#FilterPattern"/>
      
      <Iterate VariableName="TilePyramidNode" XPath="TilePyramid">
      	<PythonCall Function="tile.VerifyImages"/>
      </Iterate>
 
	  <PythonCall Function="tile.Evaluate" EvaluateSequenceArg="max"/>
	  <PythonCall Function="tile.Evaluate" EvaluateSequenceArg="min"/>
	  
	  <Select VariableName="ImageNode" Root="FilterNode" XPath="Image[@Name='max']"/>
	  <PythonCall Function="tile.CorrectTiles" FilterNode="#FilterNode" ImageNode="#ImageNode" OutputFilterName="#OutputFilter" InvertSource="True"/>
	</Iterate>
  </Pipeline>
  
  <Pipeline Name="Migrate" Description="Migrate meta-data to latest version">
  	<Iterate VariableName="FilterNode" XPath="Block/Section/Channel/Filter">
  		<PythonCall Function="tile.MigrateMultipleImageSets">
      	</PythonCall>
  	</Iterate>
  </Pipeline>
  
  <Pipeline Name="RenameFilter" Description="Migrate meta-data to latest version">
	  <Arguments>
	    <Argument flag="-InputFilter" dest="InputFilter" help="Old Filter name" required="True"/>
	  	<Argument flag="-OutputFilter" dest="NewName" help="New Filter name" required="True"/>
	  </Arguments>
  	<Iterate VariableName="FilterNode" XPath="Block/Section/Channel/Filter[@Name='#InputFilter']">
  		<PythonCall Function="general.Rename" OldNode="#FilterNode"/>
  		<PythonCall Function="general.MovePath" Node="#FilterNode" NewPath="#NewName"/>
  	</Iterate>
  	
  	<Iterate VariableName="FilterNode" XPath="Block/Section/Channel/Filter[@Name='#NewName']">
  		<PythonCall Function="general.MovePath" Node="#FilterNode" NewPath="#NewName"/>
  	</Iterate>
  </Pipeline>
  
  <Pipeline Name="RemoveDuplicateFilters" Description="Migrate meta-data to latest version">
	  <Arguments>
	    <Argument flag="-Attrib" dest="ChildAttrib" default="Name" help="Attrib to check for duplicates" required="False"/>
	    <Argument flag="-ChildNode" dest="ChildNodeName" default="Filter_Link" help="Child node to check for duplicates" required="False"/> 
	  </Arguments>
  	<Iterate VariableName="ParentNode" XPath="Block/Section/Channel">
  		<PythonCall Function="general.RemoveDuplicateLinks" ChildNodeName="#ChildNodeName" ChildAttrib="#ChildAttrib"/> 
  	</Iterate>
  </Pipeline>
  
  <Pipeline Name="AdjustContrast" Description="Creates a new filter with adjusted contrast">
    <Arguments>
      <Argument flag="-Gamma" dest="Gamma" help="Gamma value for intensity auto-level" required="False"/>
      <Argument flag="-MinCutoff" dest="MinCutoff" default="0.1" help="Min pixel intensity cutoff as a percentage, 0 to 100" required="False"/>
      <Argument flag="-MaxCutoff" dest="MaxCutoff" default="0.5" help="Max pixel intensity cutoff as a percentage, 0 to 100. Specifying '1' puts the cutoff at 99% of the maximum pixel intensity value." required="False"/>
      <Argument flag="-InputFilter" dest="InputFilter" default="Raw8" help="Filter to draw images from" required="False"/>
      <Argument flag="-OutputFilter" dest="OutputFilter" default="Leveled" help="Filter to draw images from" required="False"/>
    </Arguments>
    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="TransformNode" XPath="Transform[@Name='Prune']"/>
      <Select VariableName="LevelNode" Root="ChannelNode" XPath="Filter[@Name='#InputFilter']/TilePyramid/Level[@Downsample='1']"/>
      <PythonCall Function="tile.AutolevelTiles" OutputFilterName="#OutputFilter">
        <Parameters>
          <Entry Name="Gamma" Value="#Gamma"/> 
          <Entry Name="MinCutoff" Value="#MinCutoff"/> 
          <Entry Name="MaxCutoff" Value="#MaxCutoff"/> 
        </Parameters>
      </PythonCall>

      <Select VariableName="PyramidNode" Root="ChannelNode"  XPath="Filter[@Name='#OutputFilter']/TilePyramid"/>
      <PythonCall Function="tile.BuildTilePyramids"/>
    </Iterate>
  </Pipeline>

  <Pipeline Name="Mosaic" Description="Aligns tiles of a filter into a single mosaic">
    <Arguments>
      <Argument flag="-RegistrationDownsample" dest="Downsample" default="4" type="int" help="Downsample level to use for ir-tools" required="False"/>
      <Argument flag="-AssembleDownsample" dest="AssembleDownsample" default="8,16,32,64" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      <Argument flag="-MaxOffset" dest="MaxOffset" default="0.5" type="float" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      <Argument flag="-NoInterlace" dest="Interlace" action="store_false" default="True" help="Setting this flag skips the interlace step after assemble.  Interlaced images load faster on web pages, but are larger than non-interlaced images." required="False"/>
      <Argument flag="-InputFilter" dest="InputFilter" default="Leveled" help="Filter used to build leveled and mosaic images" required="False"/>
    </Arguments>
    
    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="LevelNode" XPath="Filter[@Name='#InputFilter']/TilePyramid/Level[@Downsample='#Downsample']"/>
      <Select VariableName="TransformNode" XPath="Transform[@Name='Prune']"/>

	  <!-- ir-translate, calculate translation for each tile into the greater mosaic -->
      <PythonCall Function="registration.TranslateTransform" OutputTransform="Translate">
        <Parameters>
          <Entry Name="MaxOffsetX" Value="#MaxOffset"/>
        </Parameters>
      </PythonCall>

	  <!-- ir-refine-grid, lay a mesh over each tile and align points to overlapping tiles -->
      <Select VariableName="TransformNode" Root="ChannelNode"  XPath="Transform[@Name='Translate']"/>
      <PythonCall Function="registration.CompressTransforms"/>
      <PythonCall Function="registration.GridTransform" OutputTransform="Grid">
        <Parameters>
          <Entry Name="MeshWidth" Value="8"/>
          <Entry Name="MeshHeight" Value="8"/>
          <Entry Name="Cell" Value="96"/>
          <Entry Name="Threshold" Value="0.5"/>
        </Parameters>
      </PythonCall>
      
      <!-- Move mosaics to have an origin at zero -->
      <Select VariableName="TransformNode" Root="ChannelNode"  XPath="Transform[@Name='Grid']"/>
      <PythonCall Function="registration.CompressTransforms"/>
	  <PythonCall Function="tile.TranslateToZeroOrigin" OutputTransformName="ZeroGrid"/>
 
 	  <!-- Adjust grid transform to have an origin at 0,0.  -->
      <Select VariableName="TransformNode" XPath="Transform[@Name='ZeroGrid']"/>
      
      <!-- Build a downsampled image of the mosaic -->
      <Select VariableName="PyramidNode" Root="ChannelNode"  XPath="Filter[@Name='#InputFilter']/TilePyramid"/>
      <PythonCall Function="tile.AssembleTransform" Interlace="0" Levels="#AssembleDownsample">
        <Parameters>
          <Entry Name="feathering" Value="binary"/>
        </Parameters>
      </PythonCall>
    </Iterate>
  </Pipeline>
  
  <Pipeline Name="TEMMosaic" Description="Deprecated by use of AdjustContrast and Mosaic pipeline combo.">
    <Arguments>
      <Argument flag="-RegistrationDownsample" dest="Downsample" default="4" type="int" help="Downsample level to use for ir-tools" required="False"/>
      <Argument flag="-AssembleDownsample" dest="AssembleDownsample" default="8,16,32,64" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      <Argument flag="-MaxOffset" dest="MaxOffset" default="0.5" type="float" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      <Argument flag="-NoInterlace" dest="Interlace" action="store_false" default="True" help="Setting this flag skips the interlace step after assemble.  Interlaced images load faster on web pages, but are larger than non-interlaced images." required="False"/>
      <Argument flag="-Gamma" dest="Gamma" help="Gamma value for intensity auto-level" required="False"/>
      <Argument flag="-MinCutoff" dest="MinCutoff" default="0.1" help="Min pixel intensity cutoff as a percentage, 0 to 100" required="False"/>
      <Argument flag="-MaxCutoff" dest="MaxCutoff" default="0.5" help="Max pixel intensity cutoff as a percentage, 0 to 100. Specifying '1' puts the cutoff at 99% of the maximum pixel intensity value." required="False"/>
      <Argument flag="-InputFilter" dest="InputFilter" default="Raw8" help="Filter used to build leveled and mosaic images" required="False"/>
      <Argument flag="-UseCluster" dest="UseCluster" action="store_true" default="False" help="Divide task of assembling images to other computers if a cluster is available" required="False"/>
    </Arguments>
    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="TransformNode" XPath="Transform[@Name='Prune']"/>
      <Select VariableName="LevelNode" Root="ChannelNode" XPath="Filter[@Name='#InputFilter']/TilePyramid/Level[@Downsample='1']"/>
      <PythonCall Function="tile.AutolevelTiles" OutputFilterName="Leveled">
        <Parameters>
          <Entry Name="Gamma" Value="#Gamma"/> 
          <Entry Name="MinCutoff" Value="#MinCutoff"/> 
          <Entry Name="MaxCutoff" Value="#MaxCutoff"/> 
        </Parameters>
      </PythonCall>

      <Select VariableName="PyramidNode" Root="ChannelNode"  XPath="Filter[@Name='Leveled']/TilePyramid"/>
      <PythonCall Function="tile.BuildTilePyramids"/>
    </Iterate>

    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="LevelNode" XPath="Filter[@Name='Leveled']/TilePyramid/Level[@Downsample='#Downsample']"/>
      <Select VariableName="TransformNode" XPath="Transform[@Name='Prune']"/>

	  <!-- ir-translate, calculate translation for each tile into the greater mosaic -->
      <PythonCall Function="registration.TranslateTransform" OutputTransform="Translate">
        <Parameters>
          <Entry Name="MaxOffsetX" Value="#MaxOffset"/>
        </Parameters>
      </PythonCall>

	  <!-- ir-refine-grid, lay a mesh over each tile and align points to overlapping tiles -->
      <Select VariableName="TransformNode" Root="ChannelNode"  XPath="Transform[@Name='Translate']"/>
      <PythonCall Function="registration.CompressTransforms"/>
      <PythonCall Function="registration.GridTransform" OutputTransform="Grid">
        <Parameters>
          <Entry Name="MeshWidth" Value="8"/>
          <Entry Name="MeshHeight" Value="8"/>
          <Entry Name="Cell" Value="96"/>
          <Entry Name="Threshold" Value="0.5"/>
        </Parameters>
      </PythonCall>
      
      <!-- Move mosaics to have an origin at zero -->
      <Select VariableName="TransformNode" Root="ChannelNode"  XPath="Transform[@Name='Grid']"/>
      <PythonCall Function="registration.CompressTransforms"/>
	  <PythonCall Function="tile.TranslateToZeroOrigin" OutputTransformName="ZeroGrid"/>
 
 	  <!-- Adjust grid transform to have an origin at 0,0.  -->
      <Select VariableName="TransformNode" XPath="Transform[@Name='ZeroGrid']"/>
      
      <!-- Build a downsampled image of the mosaic -->
      <Select VariableName="PyramidNode" Root="ChannelNode"  XPath="Filter[@Name='Leveled']/TilePyramid"/>
      <PythonCall Function="tile.AssembleTransform" Interlace="0" Levels="#AssembleDownsample">
        <Parameters>
          <Entry Name="feathering" Value="binary"/>
        </Parameters>
      </PythonCall>
    </Iterate>
        
    <Select VariableName="ReportingElement" XPath="Block"/>
    <PythonCall Function="reporting.GenerateTableReport"
     		    OutputFile="ImageReport.html"
     		    RowXPath="Section"
     		    RowLabelAttrib="Number"
     		    MaxImageWidth="512"
     		    MaxImageHeight="512"
     		    ColumnXPaths="Channel/Filter[@Name='Leveled']/ImageSet/Level[@Downsample='16']/Image,Channel/Notes,Channel/Data,Channel/Filter[@Name='#InputFilter']/Histogram/Image,Channel/Filter[@Name='#InputFilter']/Prune/Image" />

    <PythonCall Function="vikingxml.CreateVikingXML"  OutputFile="TEMMosaic.vikingxml"/>
    		    
    <PythonCall Module="nornir_buildmanager.VolumeFinder" Function="EmailIndex" subject="Volume Report" to="#To" cc="#CC"/>
  </Pipeline>
  
  <Pipeline Name="Assemble" Description="Used after TEMPrepare, levels the image intensity, aligns tiles into a single mosaic">
    <Arguments>
      <Argument flag="-AssembleDownsample" dest="AssembleDownsample" default="1" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      <Argument flag="-NoInterlace" dest="Interlace" action="store_false" default="True" help="Setting this flag skips the interlace step after assemble.  Interlaced images load faster on web pages, but are larger than non-interlaced images." required="False"/>
      <Argument flag="-Filter" dest="FilterRegEx" default="Raw8" help="Filter used to build leveled and mosaic images" required="False"/>
      <Argument flag="-Output" dest="OutputDir" help="Directory to move assembled images to" required="True"/>
      <Argument flag="-Transform" dest="TransformName" default="ZeroGrid" help="Directory to move assembled images to" required="False"/>
    </Arguments>
    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
    	<!-- Build a downsampled image of the mosaic -->
      <Select VariableName="TransformNode" XPath="Transform[@Name='ZeroGrid']"/>
      
      <Iterate VariableName="FilterNode" XPath="Filter">
        <RequireMatch Attribute="Name" RegEx="#FilterRegEx"/>
        <Select VariableName="PyramidNode" Root="FilterNode"  XPath="TilePyramid"/>
        <PythonCall Function="tile.AssembleTransform" Interlace="0" Levels="#AssembleDownsample">
          <Parameters>
            <Entry Name="feathering" Value="binary"/>
          </Parameters>
        </PythonCall>
      
        <Select VariableName="DataNode" XPath="ImageSet/Level[@Downsample='#AssembleDownsample']/Image"/>
	    <PythonCall Function="reporting.CopyFiles" DataNode="#DataNode" OutputDir="#OutputDir"/>
	  </Iterate>
    </Iterate>
  </Pipeline>

  <Pipeline Name="EmailReport" Description="E-mail the summary for a volume">
  	<Arguments>
  		<Argument flag="-InputFilter" dest="InputFilter" default="Raw8" help="Filter used to build leveled and mosaic images" required="False"/>
  	</Arguments>
    <Select VariableName="ReportingElement" XPath="Block"/>
    <PythonCall Function="reporting.GenerateTableReport"
     		    OutputFile="ImageReport.html"
     		    RowXPath="Section"
     		    RowLabelAttrib="Number"
     		    MaxImageWidth="512"
     		    MaxImageHeight="512"
     		    ColumnXPaths="Channel/Filter[@Name='Leveled']/ImageSet/Level[@Downsample='16']/Image,Channel/Notes,Channel/Data,Channel/Filter[@Name='#InputFilter']/Histogram/Image,Channel/Filter[@Name='#InputFilter']/Prune/Image" />

    <PythonCall Module="nornir_buildmanager.VolumeFinder" Function="EmailIndex" subject="Volume Report" to="#To" cc="#CC"/>
  </Pipeline>
  
  <Pipeline Name="StosReport" Description="E-mail the summary for a volume">
  	<Arguments>
  		<Argument flag="-StosGroup" dest="StosGroup" help="Stos group to pull images from" required="True"/>
  	</Arguments>
    <Select VariableName="ReportingElement" XPath="Block/StosGroup[@Name='#StosGroup']"/>
    <PythonCall Function="reporting.GenerateTableReport"
     		    OutputFile="StosReport.html"
     		    RowXPath="SectionMappings"
     		    RowLabelAttrib="MappedSectionNumber"
     		    MaxImageWidth="512"
     		    MaxImageHeight="512"
     		    ColumnXPaths="Image" />

    <PythonCall Module="nornir_buildmanager.VolumeFinder" Function="EmailIndex" subject="Volume Report" to="#To" cc="#CC"/>
  </Pipeline>
    
  <Pipeline Name="CreateVikingXML"  Description="Create a vikingxml file for use in Viking"> 
    <PythonCall Function="vikingxml.CreateVikingXML" OutputFile="TEMStos32.vikingxml" StosMapName="FinalStosMap" StosGroupName="StosGrid32"/>
    <PythonCall Function="vikingxml.CreateVikingXML" OutputFile="TEMStos16.vikingxml" StosMapName="FinalStosMap" StosGroupName="StosGrid16"/>
    <PythonCall Function="vikingxml.CreateVikingXML" StosMapName="SliceToVolume" StosGroupName="SliceToVolume16"/>
  </Pipeline>

  <Pipeline Name="AssembleTiles" Description="Build small tiles, usually 256x256, that allow regions of the mosaic to be rapidly loaded">
    <Iterate VariableName="ChannelNode" XPath="Block/Section/Channel">
      <Select VariableName="TransformNode" XPath="Transform[@Name='ZeroGrid']"/>
      <Select VariableName="FilterNode" XPath="Filter[@Name='Leveled']"/>
      <Select VariableName="PyramidNode" Root="FilterNode" XPath="TilePyramid"/>
      <PythonCall Function="tile.AssembleTileset"/>
    
      <Select VariableName="TileSetNode" Root="FilterNode" XPath="Tileset"/>
      <PythonCall Function="tile.BuildTilesetPyramid"/>
    </Iterate>

    <PythonCall Function="vikingxml.CreateVikingXML" StosMapName="FinalStosMap" StosGroupName="StosGrid16"/>
  </Pipeline>
  
  <Pipeline Name="CreateBlobFilter" Description="Create a blob filter for an input filter">
  	<Arguments>
	  	<Argument flag="-BlobFilters" default="(?![M|m]ask)" dest="BlobFilters" help="Regular expression describing filters to be blobbed" required="False"/>
	  	<Argument flag="-BlobLevels" dest="BlobDownsampleLevels" default="1" help="Downsample levels to be blobbed" required="False"/>
	  	<Argument flag="-BlobRadius" dest="BlobRadius" default="9" help="Radius to calculate variance within" required="False"/>
	  	<Argument flag="-BlobMedian" dest="BlobMedian" default="7" help="Median filter radius for input" required="False"/>
	  	<Argument flag="-BlobMax"    dest="BlobMax" default="3" help="Max variance before cropping" required="False"/>
  	</Arguments>
  	
  	<Iterate VariableName="InputFilter" XPath="Block/Section/Channel/Filter">
  		<RequireMatch Attribute="Name" RegEx="#BlobFilters"/>
  		<PythonCall Function="channel.CreateBlobFilter"
                    Levels="#BlobDownsampleLevels">
	        <Parameters>
	          <Entry Name="r" Value="#BlobRadius"/>
	          <Entry Name="median" Value="#BlobMedian"/>
	          <Entry Name="max" Value="#BlobMax"/>
	        </Parameters>
      	</PythonCall>
  	</Iterate>
  </Pipeline>
  
  <Pipeline Name="AlignSections" Description="Used after TEMMosaic has produced good quality output.  Aligns mosaics to immediate neighbors">
    <Arguments>
      <Argument flag="-Center" dest="Center" type="int" help="Center section of the volume" required="False"/>
      <Argument flag="-NumAdjacentSections"  default="1" dest="NumAdjacentSections" type="int" help="Number of adjacent sections to attempt registration with" required="False"/>
      <Argument flag="-AlignChannels"  default="*" dest="ChannelsRegEx" type="str" help="Regular expression describing channels to be aligned" required="False"/>
      <Argument flag="-AlignFilters"  default="(?![M|m]ask)" dest="FiltersRegEx" type="str" help="Regular expression describing filters to be aligned" required="False"/>
      <Argument flag="-StosUseMasks"  default="True" dest="UseMasks" type="bool" help="Image set to use as mask" required="False"/>
      <Argument flag="-AlignDownsample"  default="32" dest="StosBruteDownsample" type="int" help="Image set to use as mask" required="False"/>
    </Arguments>
        
    <Select VariableName="BlockNode" XPath="Block"/>
    <PythonCall Function="block.CreateSectionToSectionMapping" OutputStosMapName="PotentialRegistrationChain" >
      <Parameters>
        <Entry Name="NumAdjacentSections" Value="#NumAdjacentSections"/>
        <Entry Name="CenterSection" Value="#Center"/>
      </Parameters>
    </PythonCall>

    <Select Root="BlockNode" VariableName="StosMapNode" XPath="StosMap[@Name='PotentialRegistrationChain']"/>
    <Iterate Root="StosMapNode" VariableName="MappingNode" XPath="Mapping">
      <PythonCall Function="block.StosBrute" Root="BlockNode" OutputGroup="StosBrute#StosBruteDownsample" ChannelsRegEx="#ChannelsRegEx" FiltersRegEx="#FiltersRegEx">
        <Parameters>
          <Entry Name="Downsample" Value="#StosBruteDownsample"/>
          <Entry Name="refine"/>
          <Entry Name="regularize"/>
        </Parameters>
      </PythonCall>
    </Iterate>
 
    <Select VariableName="GroupNode" Root="BlockNode" XPath="StosGroup[@Name='StosBrute#StosBruteDownsample']"/>
    <PythonCall Function="block.AssembleStosOverlays" GroupNode="#GroupNode"/>
    
    <Select Root="BlockNode" VariableName="StosMapNode" XPath="StosMap[@Name='PotentialRegistrationChain']"/>
    <PythonCall Function="block.SelectBestRegistrationChain" InputGroupNode="#GroupNode" StosMapNode="#StosMapNode"/>

  </Pipeline>
  
  <Pipeline Name="RefineSectionAlignment" Description="Used after TEMMosaic has produced good quality output.  Aligns mosaics to immediate neighbors">
    <Arguments>
      <Argument flag="-SectionMap"  default="FinalStosMap" dest="StosMap" type="str" help="Map describing which sections register to each other" required="False"/>
      <Argument flag="-InputGroup"  default="StosBrute" dest="InputGroup" type="str" help="Map describing which sections register to each other" required="False"/>
      <Argument flag="-InputDownsample" dest="InputDownsample" type="int" help="Downsample level to use for input" required="True"/>
      <Argument flag="-OutputGroup"  default="StosGrid" dest="OutputGroup" type="str" help="Name of output group" required="False"/>
      <Argument flag="-OutputDownsample" dest="OutputDownsample" type="int" help="Downsample level to use for refinement" required="True"/>
      <Argument flag="-Filter"  default="(?![M|m]ask)" dest="FiltersRegEx" type="str" help="Regular expression describing filters to be aligned" required="False"/>
      <Argument flag="-StosUseMasks"  default="True" dest="UseMasks" type="bool" help="Image set to use as mask" required="False"/>
    </Arguments>
    
    <Select VariableName="BlockNode" XPath="Block"/>
    <Select Root="BlockNode" VariableName="StosMapNode" XPath="StosMap[@Name='#StosMap']"/>
    
    <Select VariableName="InputGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#InputGroup#InputDownsample']"/>
    <Iterate Root="StosMapNode" VariableName="MappingNode"  XPath="Mapping">
      <PythonCall Function="block.StosGrid" MappingNode="#MappingNode" OutputStosGroup="#OutputGroup#OutputDownsample" Downsample="#OutputDownsample"
      												   ControlFilterPattern="#FiltersRegEx" MappedFilterPattern="#FiltersRegEx">
        <Parameters>
          <Entry Name="grid_spacing" Value="128"/>
          <Entry Name="neighborhood" Value="128"/>
          <Entry Name="it" Value="10"/>
          <Entry Name="fft" Value="2 0.25"/> 
          <Entry Name="displacement_threshold" Value="0.1"/>
        </Parameters>
      </PythonCall>
    </Iterate>

    <Select VariableName="InputGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#OutputGroup#OutputDownsample']"/>
    <PythonCall Function="block.AssembleStosOverlays" GroupNode="#InputGroupNode"/>
     
    <PythonCall Function="vikingxml.CreateVikingXML" OutputFile="#OutputGroup#OutputDownsample.vikingxml" StosMapName="#StosMap" StosGroupName="#OutputGroup#OutputDownsample"/>
  </Pipeline>
  
  <Pipeline Name="SliceToVolume"  Description="Used after TEMStos has produced good quality output.  Aligns all sections to a common space, usually the center section">
  <Arguments>
      <Argument flag="-InputDownsample" dest="StovDownsample" default="16" type="int" help="Downsample level to use for SliceToVolume" required="False"/>
      <Argument flag="-InputGroup"  default="StosGrid" dest="StovInputGroup" type="str" help="Map describing which sections register to each other" required="True"/>
      <Argument flag="-OutputGroup"  default="SliceToVolume" dest="StovOutputGroupName" type="str" help="Name of output group" required="False"/>
  </Arguments>
  	<Iterate VariableName="BlockNode" XPath="Block"> 
  		<Iterate VariableName="StosMapNode" XPath="StosMap[@Name='FinalStosMap']">
  			<Iterate VariableName="StosGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#StovInputGroup#StovDownsample']">
  				<PythonCall Function="block.BuildSliceToVolumeTransforms"  OutputMap="#StovOutputGroupName" OutputGroup="#StovOutputGroupName#StovDownsample">
  				</PythonCall>
  			</Iterate>
  		</Iterate>
  		
  		<!--<Iterate VariableName="StosMapNode" XPath="StosMap[@Name='#StovOutputGroupName']">
  		  <Iterate VariableName="StosGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#StovOutputGroupName#StovDownsample']">
          	<PythonCall Function="block.AssembleStosOverlays" GroupNode="#StosGroupNode"/>
          </Iterate>
        </Iterate> -->		
  	</Iterate>
  	
  	<PythonCall Function="vikingxml.CreateVikingXML" OutputFile="#StovOutputGroupName#StovDownsample.vikingxml" StosMapName="#StovOutputGroupName#StovDownsample" StosGroupName="#StovOutputGroupName#StovDownsample"/>
  </Pipeline>
  
  <Pipeline Name="ScaleVolumeTransforms" Description="Changes stos files to use the specified filters and downsample level">
   <Arguments>
  	 <Argument flag="-ScaleGroupName" default="SliceToVolume" dest="ScaleGroupName" type="str" required="False" help="Name of stos group to create scaled version of" />
  	 <Argument flag="-ScaleInputDownsample" dest="ScaleInputDownsample" type="int" help="Downsample level of input stosgroup" required="True"/>
     <Argument flag="-ScaleOutputDownsample"  default="1" dest="ScaleOutputDownsample" type="int" help="Downsample level of output" required="False"/>
   </Arguments>
   
   <Iterate VariableName="BlockNode" XPath="Block">
       <Select VariableName="StosGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#ScaleGroupName#ScaleInputDownsample']"/> 
	   <PythonCall Function="block.ScaleStosGroup"
	   			   InputStosGroupNode="#StosGroupNode"
	               OutputDownsample="#ScaleOutputDownsample"
	               OutputGroupName="#ScaleGroupName#ScaleOutputDownsample"/>   
   </Iterate>
  </Pipeline>
   
  <Pipeline Name="VolumeImage" Description="Used after TEMStos has produced good quality output.  Aligns all sections to a common space, usually the center section">
  <Arguments>
      <Argument flag="-InputGroup" default="SliceToVolume" dest="VolumeImageGroupName" type="str" required="False" help="Name of stos group to create scaled version of, default = SliceToVolume"/>
      <Argument flag="-GroupDownsample" default="1" dest="VolumeImageDownsample" type="int" help="Downsample level of input stosgroup, default = 1"/>
  </Arguments>
  	<Iterate VariableName="BlockNode" XPath="Block"> 
	  <!-- <Iterate VariableName="StosMapNode" XPath="StosMap[@Name='#VolumeImageGroupName']">
  		  <Iterate VariableName="StosGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#VolumeImageGroupName#VolumeImageDownsample']">
          	<PythonCall Function="block.AssembleStosOverlays" GroupNode="#StosGroupNode"/>
          </Iterate>
      </Iterate> -->		
        
      <Iterate VariableName="StosGroupNode" Root="BlockNode" XPath="StosGroup[@Name='#VolumeImageGroupName#VolumeImageDownsample']">
	    <Iterate VariableName="TransformNode" Root="StosGroupNode" XPath="SectionMappings/Transform">
      	  <PythonCall Function="block.SectionToVolumeImage" TransformNode="#TransformNode"/>
      	</Iterate>
      </Iterate>
  	</Iterate>
  </Pipeline>
  
  <Pipeline Name="MosaicToVolume" Description="Used after slice to volume.  Creates new mosaics that map each tile directly into the volume space by passing mosaics through slice-to-volume transformations">   
     <Arguments>
      <Argument flag="-StosDownsample" dest="StosDownsample" default="16" type="int" help="Downsample level to use from SliceToVolume" required="False"/>
      <Argument flag="-AssembleDownsample" dest="AssembleDownsample" default="8" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      <Argument flag="-Output" dest="OutputDir" help="Directory to move assembled images to" required="False"/>
    </Arguments>
    
  	 <Iterate VariableName="BlockNode" XPath="Block">
  	   <Select VariableName="StosMapNode" XPath="StosMap[@Name='SliceToVolume']"/>
  	   <Select VariableName="StosGroupNode" Root="BlockNode" XPath="StosGroup[@Name='SliceToVolume#StosDownsample']"/>
  	   
  	   <Iterate VariableName="ChannelNode" XPath="Section/Channel">
  	   	
  	   	 <Iterate VariableName="TransformNode" Root="ChannelNode" XPath="Transform[@Name='Grid']">
	  	   <PythonCall Function="tile.TranslateToZeroOrigin" OutputTransformName="ZeroGrid"/>
  		 </Iterate>
  	     
         <Select VariableName="TransformNode" XPath="Transform[@Name='ZeroGrid']"/> 
         <PythonCall Function="block.BuildMosaicToVolumeTransforms"  OutputTransformName="GridToVolume"/>
       </Iterate>

       <Iterate VariableName="ChannelNode" Root="BlockNode" XPath="Section/Channel">
         <Select VariableName="TransformNode" XPath="Transform[@Name='GridToVolume']"/>
         <Select VariableName="PyramidNode" Root="ChannelNode"  XPath="Filter[@Name='Leveled']/TilePyramid"/>
	   
	     <PythonCall Function="tile.AssembleTransform" Levels="#AssembleDownsample" ImageSetName="VolumeAligned" Interlace="0">
	        <Parameters>
	          <Entry Name="feathering" Value="binary"/>
	        </Parameters>
	     </PythonCall>

	   </Iterate>
	   
	   <Iterate VariableName="DataNode" Root="BlockNode" XPath="Section/Channel/Filter[@Name='Leveled']/ImageSet[@Name='VolumeAligned']/Level[@Downsample='#AssembleDownsample']/Image">
	   	<PythonCall Function="reporting.CopyFiles" OutputDir="#OutputDir"/>
	   </Iterate>  
  	</Iterate>
  </Pipeline>
  
  <Pipeline Name="ExportMosaics" Description="Copies images of sections to an output directory">   
     <Arguments>
      	<Argument flag="-AssembleDownsample" dest="AssembleDownsample" default="8" help="Comma seperated list of downsample levels used for assembling output images" required="False"/>
      	<Argument flag="-Filter" dest="Filter" default="Leveled" help="Filter used to build leveled and mosaic images" required="False"/>
      	<Argument flag="-Output" dest="OutputDir" help="Directory to move assembled images to" required="False"/>
    </Arguments>
	  
    <Iterate VariableName="DataNode" XPath="Block/Section/Channel/Filter[@Name='#Filter']/ImageSet/Level[@Downsample='#AssembleDownsample']/Image">
   		<PythonCall Function="reporting.CopyFiles" OutputDir="#OutputDir"/>
   	</Iterate>
  </Pipeline>

  <Pipeline Name="LM">

    <PruneTiles InputChannel="LM"
                InputLevel="4"
                InputFilterTag="Raw"
                InputTransformTag="supertile"
                OutputTransformTag="prune"
                Threshold ="120"/>

    <AutolevelTiles InputChannel="LM"
                    InputFilterTag ="Raw"
                    OutputFilterTag ="Leveled"
                    InputTransformTag ="prune" />

    <BuildTilePyramids InputChannel="LM"
                       InputTransformTag="prune"
                       InputFilterTag="Leveled"
                       Levels="1,2,4,8,16,32,64,128,256"/>

    <BuildTilePyramids InputChannel="LM"
                       InputTransformTag="prune"
                       InputFilterTag="Raw"
                       Levels="1,4,16,32"/>

    <TranslateTransfrom InputLevel="4"
                     InputChannel="LM"
                     InputFilterTag ="Primary"
                     InputTransformTag="prune"
                     OutputTransformTag="Translate"
                     MaxOffsetX="8" MaxOffsetY="8"/>

    <RefineTransfrom InputChannel="LM"
                  InputFilterTag="Primary"
                  InputLevel="4"
                  InputTransformTag="translate"
                  OutputTransformTag="grid-8x8"
                  MeshHeight ="8" MeshWidth ="8"/>

    <RefineTransfrom InputChannel="LM"
                  InputFilterTag="Primary"
                  InputLevel="2"
                  InputTransformTag="grid-8x8"
                  OutputTransformTag="grid-20x20"
                  MeshHeight ="20" MeshWidth ="20"/>

    <AssembleTransfrom InputChannel="LM"
                    InputFilterTag="Primary"
                    InputTransformTag="grid-20x20"
                    Levels="16,32"
                    Feathering="binary"/>

    <AssembleTransfrom InputChannel="LM"
                    InputFilterTag="Raw"
                    InputTransformTag="grid-20x20"
                    Levels="16,32"
                    Feathering="binary"/>

    <BlobTransfrom InputChannel="LM"
                InputFilterTag="Primary"
                InputTransformTag="grid-20x20"
                Levels="16,32"
                BlobMedian="3"
                BlobRadius ="5"/>

    <SliceToSliceBrute InputChannel="LM"
                       InputFilterTag="Primary"
                       InputTransformTag="grid-20x20"
                       OutputStosTag="brute"
                       InputLevel ="32"/>

    <SliceToSliceGrid InputChannel="LM"
                      InputFilterTag="Primary"
                      InputStosTag ="brute"
                      OutputStosTag="grid32"
                      InputLevel ="32"/>

    <SliceToSliceGrid InputChannel="LM"
                      InputFilterTag="Primary"
                      InputStosTag ="grid"
                      OutputStosTag="grid16"
                      InputLevel ="16"/>
  </Pipeline>
</Pipelines>